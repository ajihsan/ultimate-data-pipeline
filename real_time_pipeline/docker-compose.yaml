version: "3.0"

services:
  postgres:
    image: debezium/postgres:13
    container_name: postgres
    hostname: postgres
    restart: always
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_USER: postgres
    ports:
      - "5432:5432"
    volumes:
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/postgres-init.sql

  clickhouse:
    image: clickhouse/clickhouse-server:23.3.13
    container_name: clickhouse-server
    ports:
      - "8123:8123"
    ulimits:
      nofile:
        soft: 262144
        hard: 262144
    volumes:
      - ./clickhouse/config.xml:/etc/clickhouse-server/config.xml
      - ./clickhouse/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
    - kafka_network

  zookeeper:
    image: confluentinc/cp-zookeeper:6.2.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:6.2.0
    hostname: kafka
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - kafka_network

  kafka-connect:
    image: confluentinc/cp-kafka-connect-base:6.2.0
    hostname: kafka-connect
    container_name: kafka-connect
    depends_on:
      - postgres
      - zookeeper
      - kafka
    ports:
      - "8083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: 'kafka:29092'
      CONNECT_REST_ADVERTISED_HOST_NAME: "kafka-connect"
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: "kafka-connect-group1"
      CONNECT_CONFIG_STORAGE_TOPIC: "_kafka_connect_group1-configs"
      CONNECT_OFFSET_STORAGE_TOPIC: "_kafka_connect_group1-offsets"
      CONNECT_STATUS_STORAGE_TOPIC: "_kafka_connect_group1-status"
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
      CONNECT_LOG4J_LOGGERS: org.apache.zookeeper=ERROR,org.I0Itec.zkclient=ERROR,org.reflections=ERROR
    command:
      - bash
      - -c
      - |
        echo "Installing connector plugins"
        confluent-hub install --no-prompt debezium/debezium-connector-postgresql:1.5.0
        wget -P /usr/share/confluent-hub-components "https://d2p6pa21dvn84.cloudfront.net/api/plugins/clickhouse/clickhouse-kafka-connect/versions/v1.2.6/clickhouse-clickhouse-kafka-connect-v1.2.6.zip"
        confluent-hub install --no-prompt /usr/share/confluent-hub-components/clickhouse-clickhouse-kafka-connect-v1.2.6.zip

        #
        echo "Launching Kafka Connect worker"
        /etc/confluent/docker/run &
        #
        echo "Waiting for Kafka Connect to start listening on localhost:8083 ‚è≥"
        while : ; do
            curl_status=$$(curl -s -o /dev/null -w %{http_code} http://localhost:8083/connectors)
            echo -e $$(date) " Kafka Connect listener HTTP state: " $$curl_status " (waiting for 200)"
            if [ $$curl_status -eq 200 ] ; then
            break
            fi
            sleep 5
        done
        sleep infinity
    networks:
      - kafka_network

  kowl:
    image: quay.io/cloudhut/kowl:v1.3.1
    restart: on-failure
    container_name: kowl
    ports:
      - "8080:8080"
    depends_on:
      - kafka
    environment:
      KAFKA_BROKERS: "kafka:29092"

  adminer:
    image: adminer:4.8.1
    container_name: adminer
    hostname: adminer
    restart: always
    ports:
      - 7775:8080
    environment:
      ADMINER_DEFAULT_DB_DRIVER: pgsql
      ADMINER_DEFAULT_DB_HOST: postgres
      ADMINER_DEFAULT_DB_NAME: postgres

networks:
  kafka_network:
    driver: bridge